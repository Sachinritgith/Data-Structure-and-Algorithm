class Solution {
public:
       void heapify(vector<int> &arr, int N, int i){
                                                                Time complexity O(n) space complexity O(1)
        int largest = i;
        int left = 2 * i + 1;
        int right = 2 * i + 2;
        if (left < N && arr[left] > arr[largest])
            largest = left;
        if (right < N && arr[right] > arr[largest])
            largest = right;
        if (largest != i) {
            swap(arr[i], arr[largest]);
            heapify(arr, N, largest);
        }
    }
  

    void heapSort(vector<int> &arr, int N){
        for (int i = N / 2 - 1; i >= 0; i--)
            heapify(arr, N, i);    
        for (int i = N - 1; i > 0; i--) {
            swap(arr[0], arr[i]);
            heapify(arr, i, 0);
        }
    }


    vector<int> sortArray(vector<int>& nums) {

        heapSort(nums,nums.size());
        return nums;
    }
};
