class Solution {
public:
    string longestPalindrome(string s) {
        const int n = s.length();
        if(n <= 1) return s;
        
        int len = 0;
        int startIndex = 0;
        
        for(int i = 0; i < n; i++){
            int validLen = max(getLen(i, i, n, s), getLen(i, i+1, n, s));
            
            if(validLen > len){
                len = validLen;
                startIndex = i - (len - 1) / 2;
            }
        }
        return s.substr(startIndex, len);
    }
private:
    int getLen(int l, int r, int n, string s){
        while(l >= 0 && r < n && s[l]==s[r]){
            l--;
            r++;
        }
        return r - l - 1;
    }
};




class Solution {
public:
    string longestPalindrome(string s) {
        if(s == '' || s.size() == 0){
            return '';
        }

        int maxLength = 1;
        int i, j;
        int low, high;
        int start = 0;

        for(i = 1; i < s.size(); i++){
            // check for even length palindrome substring
            low = i - 1;
            high = i;

            while(low >= 0 && high < s.size() && s[low] == s[high]){
                if(high - low + 1 > maxLength) {
                    start = low;
                    maxLength = high - low + 1;
                }
                low--;
                high++;
            }

            // check for odd length palindrome substring
            low = i - 1;
            high = i + 1;

            while(low >= 0 && high < s.size() && s[low] == s[high]){
                if(high - low + 1 > maxLength) {
                    start = low;
                    maxLength = high - low + 1;
                }
                low--;
                high++;
            }
        }

        return s.substr(start, maxLength);
    }
};
